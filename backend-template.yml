AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  backend

  Backend stack with MySQL RDS Multi-AZ deployment

Parameters:
  VpcId:
    Type: String
    Description: VPC ID for deployment
  PublicSubnet1Id:
    Type: String
    Description: Public subnet 1 ID for ALB
  PublicSubnet2Id:
    Type: String
    Description: Public subnet 2 ID for ALB
  PrivateSubnet1Id:
    Type: String
    Description: Private subnet 1 ID for ASG
  PrivateSubnet2Id:
    Type: String
    Description: Private subnet 2 ID for ASG
  DatabaseSubnet1Id:
    Type: String
    Description: Database subnet 1 ID
  DatabaseSubnet2Id:
    Type: String
    Description: Database subnet 2 ID

Resources:
  # DB Subnet Group
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
        - !Ref DatabaseSubnet1Id
        - !Ref DatabaseSubnet2Id
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-db-subnet-group

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ApiGatewaySecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-alb-sg

  ApiGatewaySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for API Gateway VPC Link
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-apigw-sg

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Elastic Beanstalk web servers
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-web-sg

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS MySQL database
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-db-sg



  # IAM Role for Elastic Beanstalk EC2 instances
  ElasticBeanstalkEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-eb-ec2-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier


  # Instance Profile for EC2 instances
  ElasticBeanstalkInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${AWS::StackName}-eb-instance-profile
      Roles:
        - !Ref ElasticBeanstalkEC2Role

  # Elastic Beanstalk Application
  ElasticBeanstalkApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: !Sub ${AWS::StackName}-tomcat-app
      Description: Tomcat web application

  # Elastic Beanstalk Environment
  ElasticBeanstalkEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref ElasticBeanstalkApplication
      EnvironmentName: dev-env
      SolutionStackName: 64bit Amazon Linux 2 v4.9.3 running Tomcat 9 Corretto 11
      OptionSettings:
        # VPC Configuration
        - Namespace: aws:ec2:vpc
          OptionName: VPCId
          Value: !Ref VpcId
        - Namespace: aws:ec2:vpc
          OptionName: Subnets
          Value: !Ref PrivateSubnet1Id
        - Namespace: aws:ec2:vpc
          OptionName: ELBSubnets
          Value: !Ref PublicSubnet1Id
        - Namespace: aws:ec2:vpc
          OptionName: ELBScheme
          Value: internet-facing
        # Load Balancer Configuration
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: LoadBalancerType
          Value: application
        - Namespace: aws:elbv2:loadbalancer
          OptionName: SecurityGroups
          Value: !Ref ALBSecurityGroup
        # Auto Scaling Configuration
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: InstanceType
          Value: t2.micro

        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: SecurityGroups
          Value: !Ref WebServerSecurityGroup
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: !Ref ElasticBeanstalkInstanceProfile
        - Namespace: aws:autoscaling:asg
          OptionName: MinSize
          Value: 1
        - Namespace: aws:autoscaling:asg
          OptionName: MaxSize
          Value: 2
        # Health Check Configuration
        - Namespace: aws:elasticbeanstalk:healthreporting:system
          OptionName: SystemType
          Value: enhanced

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${AWS::StackName}-api
      ProtocolType: HTTP
      Description: API Gateway for Elastic Beanstalk application

  # API Gateway Integration
  ApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: HTTP_PROXY
      IntegrationMethod: ANY
      IntegrationUri: !Sub http://${ElasticBeanstalkEnvironment}.${AWS::Region}.elasticbeanstalk.com
      PayloadFormatVersion: '1.0'

  # API Gateway Route
  ApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'ANY /{proxy+}'
      Target: !Sub integrations/${ApiIntegration}

  # API Gateway Stage
  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: prod
      AutoDeploy: true

  # API Gateway Custom Domain
  ApiCustomDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: api.davidarevalo.info
      DomainNameConfigurations:
        - CertificateArn: arn:aws:acm:us-east-1:779846783544:certificate/4a18358f-19fa-43fd-ab8f-c39e5a4da178
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2

  # API Gateway Domain Mapping
  ApiDomainMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref ApiGateway
      DomainName: !Ref ApiCustomDomain
      Stage: !Ref ApiStage

  # Route 53 Record for API subdomain
  ApiDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z0663610FALSUBU5IALA
      Name: api.davidarevalo.info
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiCustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt ApiCustomDomain.RegionalHostedZoneId
        EvaluateTargetHealth: false

Outputs:
  ElasticBeanstalkURL:
    Description: Elastic Beanstalk application URL
    Value: !Sub http://${ElasticBeanstalkEnvironment}.${AWS::Region}.elasticbeanstalk.com
    Export:
      Name: !Sub ${AWS::StackName}-AppURL

  ApiGatewayURL:
    Description: API Gateway URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod
    Export:
      Name: !Sub ${AWS::StackName}-ApiURL

  CustomDomainURL:
    Description: Custom domain URL for API
    Value: https://api.davidarevalo.info
    Export:
      Name: !Sub ${AWS::StackName}-CustomDomainURL